package com.util;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;

public class BMPImageHead {	
	//文件信息
	private int bfType = 0x4d42; //位图文件类型（0—1字节）  "BM"
	private int bfSize = 54 +1024+ 640*640;//文件大小

	private int  bfReserved1 = 0;//保留1
	private int  bfReserved2 = 0;//保留2
	private int  bfHeadSize =  54+1024;//文件头偏移量
	//位图信息
	private int biSize = 40 ;// 信息头所需的字节数（14-17字节）
	private int biWidth = 640; // 位图的宽（18-21字节）
	private int biHeight = -640; // 位图的高（22-25字节）
	private int biPlanes = 1;// 目标设备的级别，必须是1（26-27字节）
	private int  biBitcount = 8; // 每个像素所需的位数（28-29字节），必须是1位（双色）、4位（16色）、8位（256色）或者24位（真彩色）之一。
	private int biCompression = 0; // 位图压缩类型，必须是0（不压缩）（30-33字节）、1（BI_RLEB压缩类型）或2（BI_RLE4压缩类型）之一。
	private int biSizeImage = 640*640; // 实际位图图像的大小，即整个实际绘制的图像大小（34-37字节）
	private int biXPelsPerMeter = 0 ; // 位图水平分辨率，每米像素数（38-41字节）这个数是系统默认值
	private int biYPelsPerMeter = 0; // 位图垂直分辨率，每米像素数（42-45字节）这个数是系统默认值
	private int biClrUsed = 0; // 位图实际使用的颜色表中的颜色数（46-49字节），如果为0的话，说明全部使用了
	private int biClrImportant = 0; // 位图显示过程中重要的颜色数(50-53字节)，如果为0的话，说明全部重要
	
	public static void main(String[] args){

	}
	
	public byte[] toByteArray() {
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		byte[] bfType =  ByteUtil.intToByte(this.bfType,2);
		byte[] bfSize = ByteUtil.intToByte(this.bfSize,4);
		byte[] bfReserved1 = ByteUtil.intToByte(this.bfReserved1,2);
		byte[] bfReserved2= ByteUtil.intToByte(this.bfReserved2,2);
		byte[] bfHeadSize = ByteUtil.intToByte(this.bfHeadSize,4);
		
		byte[] biSize = ByteUtil.intToByte(this.biSize, 4);
		byte[] biWidth = ByteUtil.intToByte(this.biWidth, 4);
		byte[] biHeight = ByteUtil.intToByte(this.biHeight,4);
		byte[] biPlanes = ByteUtil.intToByte(this.biPlanes,2);
		byte[] biBitcount =  ByteUtil.intToByte(this.biBitcount, 2);
		byte[] biCompression = ByteUtil.intToByte(this.biCompression, 4);
		byte[] biSizeImage = ByteUtil.intToByte(this.biSizeImage, 4);
		byte[] biXPelsPerMeter = ByteUtil.intToByte(this.biXPelsPerMeter, 4);
		byte[] biYPelsPerMeter = ByteUtil.intToByte(this.biYPelsPerMeter, 4);
		byte[] biClrUsed = ByteUtil.intToByte(this.biClrUsed, 4);
		byte[] biClrImportant = ByteUtil.intToByte(this.biClrImportant, 4);
		//调色板 {1,1,1,0}-->{127,127,127,0}-->{-128,-128,-128,0}-->{-1,-1,-1,0}
		byte[] rgbBean  = {0,0,0,0,1, 1, 1, 0, 2, 2, 2, 0, 3, 3, 3, 0, 4, 4, 4, 0, 5, 5, 5, 0, 6, 6, 6, 0, 7, 7, 7, 0, 8, 8, 8, 0, 9, 9, 9, 0, 10, 10, 10, 0, 11, 11, 11, 0, 12, 12, 12, 0, 13, 13, 13, 0, 14, 14, 14, 0, 15, 15, 15, 0, 16, 16, 16, 0, 17, 17, 17, 0, 18, 18, 18, 0, 19, 19, 19, 0, 20, 20, 20, 0, 21, 21, 21, 0, 22, 22, 22, 0, 23, 23, 23, 0, 24, 24, 24, 0, 25, 25, 25, 0, 26, 26, 26, 0, 27, 27, 27, 0, 28, 28, 28, 0, 29, 29, 29, 0, 30, 30, 30, 0, 31, 31, 31, 0, 32, 32, 32, 0, 33, 33, 33, 0, 34, 34, 34, 0, 35, 35, 35, 0, 36, 36, 36, 0, 37, 37, 37, 0, 38, 38, 38, 0, 39, 39, 39, 0, 40, 40, 40, 0, 41, 41, 41, 0, 42, 42, 42, 0, 43, 43, 43, 0, 44, 44, 44, 0, 45, 45, 45, 0, 46, 46, 46, 0, 47, 47, 47, 0, 48, 48, 48, 0, 49, 49, 49, 0, 50, 50, 50, 0, 51, 51, 51, 0, 52, 52, 52, 0, 53, 53, 53, 0, 54, 54, 54, 0, 55, 55, 55, 0, 56, 56, 56, 0, 57, 57, 57, 0, 58, 58, 58, 0, 59, 59, 59, 0, 60, 60, 60, 0, 61, 61, 61, 0, 62, 62, 62, 0, 63, 63, 63, 0, 64, 64, 64, 0, 65, 65, 65, 0, 66, 66, 66, 0, 67, 67, 67, 0, 68, 68, 68, 0, 69, 69, 69, 0, 70, 70, 70, 0, 71, 71, 71, 0, 72, 72, 72, 0, 73, 73, 73, 0, 74, 74, 74, 0, 75, 75, 75, 0, 76, 76, 76, 0, 77, 77, 77, 0, 78, 78, 78, 0, 79, 79, 79, 0, 80, 80, 80, 0, 81, 81, 81, 0, 82, 82, 82, 0, 83, 83, 83, 0, 84, 84, 84, 0, 85, 85, 85, 0, 86, 86, 86, 0, 87, 87, 87, 0, 88, 88, 88, 0, 89, 89, 89, 0, 90, 90, 90, 0, 91, 91, 91, 0, 92, 92, 92, 0, 93, 93, 93, 0, 94, 94, 94, 0, 95, 95, 95, 0, 96, 96, 96, 0, 97, 97, 97, 0, 98, 98, 98, 0, 99, 99, 99, 0, 100, 100, 100, 0, 101, 101, 101, 0, 102, 102, 102, 0, 103, 103, 103, 0, 104, 104, 104, 0, 105, 105, 105, 0, 106, 106, 106, 0, 107, 107, 107, 0, 108, 108, 108, 0, 109, 109, 109, 0, 110, 110, 110, 0, 111, 111, 111, 0, 112, 112, 112, 0, 113, 113, 113, 0, 114, 114, 114, 0, 115, 115, 115, 0, 116, 116, 116, 0, 117, 117, 117, 0, 118, 118, 118, 0, 119, 119, 119, 0, 120, 120, 120, 0, 121, 121, 121, 0, 122, 122, 122, 0, 123, 123, 123, 0, 124, 124, 124, 0, 125, 125, 125, 0, 126, 126, 126, 0, 127, 127, 127, 0, -128, -128, -128, 0, -127, -127, -127, 0, -126, -126, -126, 0, -125, -125, -125, 0, -124, -124, -124, 0, -123, -123, -123, 0, -122, -122, -122, 0, -121, -121, -121, 0, -120, -120, -120, 0, -119, -119, -119, 0, -118, -118, -118, 0, -117, -117, -117, 0, -116, -116, -116, 0, -115, -115, -115, 0, -114, -114, -114, 0, -113, -113, -113, 0, -112, -112, -112, 0, -111, -111, -111, 0, -110, -110, -110, 0, -109, -109, -109, 0, -108, -108, -108, 0, -107, -107, -107, 0, -106, -106, -106, 0, -105, -105, -105, 0, -104, -104, -104, 0, -103, -103, -103, 0, -102, -102, -102, 0, -101, -101, -101, 0, -100, -100, -100, 0, -99, -99, -99, 0, -98, -98, -98, 0, -97, -97, -97, 0, -96, -96, -96, 0, -95, -95, -95, 0, -94, -94, -94, 0, -93, -93, -93, 0, -92, -92, -92, 0, -91, -91, -91, 0, -90, -90, -90, 0, -89, -89, -89, 0, -88, -88, -88, 0, -87, -87, -87, 0, -86, -86, -86, 0, -85, -85, -85, 0, -84, -84, -84, 0, -83, -83, -83, 0, -82, -82, -82, 0, -81, -81, -81, 0, -80, -80, -80, 0, -79, -79, -79, 0, -78, -78, -78, 0, -77, -77, -77, 0, -76, -76, -76, 0, -75, -75, -75, 0, -74, -74, -74, 0, -73, -73, -73, 0, -72, -72, -72, 0, -71, -71, -71, 0, -70, -70, -70, 0, -69, -69, -69, 0, -68, -68, -68, 0, -67, -67, -67, 0, -66, -66, -66, 0, -65, -65, -65, 0, -64, -64, -64, 0, -63, -63, -63, 0, -62, -62, -62, 0, -61, -61, -61, 0, -60, -60, -60, 0, -59, -59, -59, 0, -58, -58, -58, 0, -57, -57, -57, 0, -56, -56, -56, 0, -55, -55, -55, 0, -54, -54, -54, 0, -53, -53, -53, 0, -52, -52, -52, 0, -51, -51, -51, 0, -50, -50, -50, 0, -49, -49, -49, 0, -48, -48, -48, 0, -47, -47, -47, 0, -46, -46, -46, 0, -45, -45, -45, 0, -44, -44, -44, 0, -43, -43, -43, 0, -42, -42, -42, 0, -41, -41, -41, 0, -40, -40, -40, 0, -39, -39, -39, 0, -38, -38, -38, 0, -37, -37, -37, 0, -36, -36, -36, 0, -35, -35, -35, 0, -34, -34, -34, 0, -33, -33, -33, 0, -32, -32, -32, 0, -31, -31, -31, 0, -30, -30, -30, 0, -29, -29, -29, 0, -28, -28, -28, 0, -27, -27, -27, 0, -26, -26, -26, 0, -25, -25, -25, 0, -24, -24, -24, 0, -23, -23, -23, 0, -22, -22, -22, 0, -21, -21, -21, 0, -20, -20, -20, 0, -19, -19, -19, 0, -18, -18, -18, 0, -17, -17, -17, 0, -16, -16, -16, 0, -15, -15, -15, 0, -14, -14, -14, 0, -13, -13, -13, 0, -12, -12, -12, 0, -11, -11, -11, 0, -10, -10, -10, 0, -9, -9, -9, 0, -8, -8, -8, 0, -7, -7, -7, 0, -6, -6, -6, 0, -5, -5, -5, 0, -4, -4, -4, 0, -3, -3, -3, 0, -2, -2, -2, 0, -1, -1, -1, 0};
		try {
			out.write(bfType);
			out.write(bfSize);
			out.write(bfReserved1);
			out.write(bfReserved2);
			out.write(bfHeadSize);
			
			out.write(biSize);
			out.write(biWidth);
			out.write(biHeight);
			out.write(biPlanes);
			out.write(biBitcount);
			out.write(biCompression);
			out.write(biSizeImage);
			out.write(biXPelsPerMeter);
			out.write(biYPelsPerMeter);
			out.write(biClrUsed);
			out.write(biClrImportant);
			out.write(rgbBean);
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		return out.toByteArray();
	}	
}

